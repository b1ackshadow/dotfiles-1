snippet #!
	#!/usr/bin/python
snippet py
	#!/usr/bin/env python
snippet py3
	#!/usr/bin/env python3
snippet imp
	import ${1:module}
# Module Docstring
snippet printe
	print(${1:s},file=sys.stderr)
snippet printf
	print(${1:s},file=f)
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
snippet glob
	for filepath in glob.glob(${1}):
		filename = os.path.basename(filepath)
		${2}
snippet transpose
	zip(*${1:iterable})
snippet flatten
	sum(${1:iterable},[])
snippet gcd
	def gcd(a,b):
	    while(b):a,b=b,a%b
	    return a	
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
snippet getopt
	import getopt

	def usage():
		print("Usage: ${1}",file=sys.stderr)

	if __name__ == "__main__":
		try:
			opts, args = getopt.getopt(sys.argv[1:], "f:h${2}", ["help"])
		except getopt.GetoptError as err:
			# print help information and exit:
			print(str(err),file=sys.stderr)
			usage()
			sys.exit(2)

		for o, a in opts:
			if o == "--help" or o == '-h':
				usage()
				sys.exit(0)
			elif o == "${3:-f}":
				${4:pass}
snippet argparse
	import argparse
	parser = argparse.ArgumentParser(description="", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
	parser.add_argument('--storeconst',dest='settype',help="", action='store_const',const='somevalue')
	parser.add_argument('-f','--dataset', type=str,help="", action='store',default="",required=False)
	parser.add_argument('-i','--dataset', type=int,help="", action='store',default="",required=False)
	parser.add_argument('bar', nargs='+', help='bar help')
	args = parser.parse_args()
snippet importfuture
	from __future__ import print_function, unicode_literals, division, absolute_import
snippet stripaccents
	unicodedata.normalize('NFKD',${1}).encode('ascii','ignore')
snippet readxml
	import lxml.etree
	doc = lxml.etree.parse(${1}).getroot()
	for element in doc:
		element.tag
		element.attrib
	for element in doc.xpath("//test"):
		${2:pass}
snippet readtab
	with open(${1},'r',encoding='utf-8') as f:
		for line in f:
			if line and line[0] != '#': 
				fields = line.split("\t")
snippet readcsv
	import csv
	with open(${1}, 'r') as f:
		reader = csv.reader(f, delimiter=',', quotechar='"')
		for row in reader:
			print(', '.join(row))
snippet readzip
	import zipfile
	with zipfile.ZipFile(${1},'r',zipfile.ZIP_DEFLATED) as f:
		${2:pass}
snippet readgzip
	import gzip
	with gzip.open(${1},'r') as f:
		${2:pass}
snippet readbz2
	import bz2
	with bz2.open(${1},'r') as f:
		${2:pass}
snippet readfolia
	from pynlpl.formats import folia
	doc = folia.Document(file=${1})
snippet newfolia
	from pynlpl.formats import folia
	doc = folia.Document(id=${1})
	doc.append(folia.Text, id="text.1")
snippet writecsv
	import csv
	with open(${1}, 'w') as f:
		writer = csv.writer(f, delimiter=',',quotechar='"')
		writer.writerows(${2:someiterable})
snippet plotfunc
	import pylab
	import numpy as np

	pylab.figure(figsize=(8,5), dpi=80)
	pylab.subplot(111)

	X = np.linspace(-1, 1, 100,endpoint=True)
	f = X**2

	pylab.plot(X, f, color="blue", linewidth=2.5, linestyle="-")
	#pylab.plot(X, S, color="red", linewidth=2.5, linestyle="-")

	pylab.xlim(-1, 1)
	pylab.xticks([-1,-0.5,0,0.5,1])

	pylab.ylim(f.min()*1.1,f.max()*1.1)
	pylab.yticks([-1, 0, +1])

	# pylab.savefig("../figures/exercice_5.png",dpi=72)
	pylab.show()

snippet plotbar
	import pylab
	import numpy as np

	n = 12
	X = np.arange(n)
	Y1 = (1-X/float(n)) * np.random.uniform(0.5,1.0,n)
	Y2 = (1-X/float(n)) * np.random.uniform(0.5,1.0,n)

	pylab.bar(X, +Y1, facecolor='#9999ff', edgecolor='white')
	pylab.bar(X, -Y2, facecolor='#ff9999', edgecolor='white')

	for x,y in zip(X,Y1):
		pylab.text(x+0.4, y+0.05, '%.2f' % y, ha='center', va= 'bottom')

	pylab.ylim(-1.25,+1.25)
	pylab.show()

snippet httpget
	import urllib.request
	import urllib parse
	#opener = urllib.request.build_opener()
	#opener.addheaders = [('User-agent', 'Mozilla/5.0')]
	params = urllib.parse.urlencode({'foo': 1, 'bar': 2})
	f = urllib.request.urlopen("http://${1}/" % params) #or opener.open()
	for line in f:
		${2:pass}
snippet httppost
	import urllib.request
	import urllib parse
	#opener = urllib.request.build_opener()
	#opener.addheaders = [('User-agent', 'Mozilla/5.0')]
	params = urllib.parse.urlencode({'foo': 1, 'bar': 2})
	f = urllib.request.urlopen("http://${1}/", params) #or opener.open()
	for line in f:
		${2:pass}
snippet httpauth
	import urllib.request
	auth_handler = urllib.request.HTTPBasicAuthHandler()
	auth_handler.add_password(realm=realm,uri=url,user=user, passwd=password)
	opener = urllib.request.build_opener(auth_handler)
	urllib.request.install_opener(opener)
	f = urllib.request.urlopen(url)
	for line in f:
		${2:pass}
snippet httpescape
	import urllib.parse.quote  #Python 3, use urllib.quote in Python 2
	s = urllib.parse.quote(s)
snippet htmlunescape
	import html.parser
	s = html.parser.HTMLParser().unescape(${1})
snippet htmlescape
	import html
	s = html.escape(${1})
snippet clamclient
	import clam.common.client
	import time
	client = clam.common.client.CLAMClient(url, user, password)
	#client.index()
	client.create(project)
	client.upload(project, inputtemplate, localfilepath, **parameters)
	client.start(project, parameters)
	while data.status == 1:
		data = client.get()
		time.sleep(1)
	if data.status == 2:
		client.download(project, filepath, localtargetfile)
		client.delete(project)
	else:
		raise Exception("Error")
snippet getalllinks
	from urllib.request import urlopen #python2: urllib2.urlopen
	import re

	#connect to a URL
	website = urlopen(url)

	#read html code
	html = website.read()

	#use re.findall to get all the links
	links = re.findall('"((http|ftp)s?://.*?)"', html)

	print(links)
snippet numericmethods
	def __add__(self, other):
		${1:pass}

	def __sub__(self, other):
		${2:pass}

	def __mul__(self, other):
		${3:pass}

	def __div__(self, other):
		${4:pass}

	def __pow__(self, pow):
		${4:pass}

snippet boolmethods
	def __and__(self, other):
		${12:pass}

	def __neg__(self, other):
		${13:pass}

	def __or__(self, other):
		${14:pass}

snippet cmpmethods
	def __eq__(self, other):
		${1:pass}

	def __ne__(self, other):
		${2:pass}

	def __lt__(self, other):
		${3:pass}

	def __le__(self, other):
		${4:pass}

	def __gt__(self, other):
		${5:pass}

	def __ge__(self, other):
		${6:pass}

snippet containermethods
	def __len__(self):
		${1:pass}

	def __getitem__(self, key):
		${2:pass}

	def __setitem__(self, key, value):
		${3:pass}

	def __delitem__(self, key):
		${4:pass}

	def __iter__(self):
		${5:pass}

	def __reversed__(self):
		${6:pass}

	def __contains__(self, item):
		${7:pass}

snippet test
	class Test${1:Class}(unittest.TestCase):


		def setUp(self):
			${2:pass}

		def tearDown(self):
			${3:pass}

		def test_${4:name}(self):
			${5:pass}

snippet testeq
	self.assertEqual(${1:first},${2:second})

snippet test1
	self.assertTrue(${1:first})

snippet test0
	self.assertFalse(${1:first})

snippet pdb
	import pdb; pdb.set_trace()

snippet ipdb
	import ipdb; ipdb.set_trace()
snippet npa
	np.array(${1})

snippet colorf
	ansicolors = {"red":31,"green":32,"yellow":33,"blue":34,"magenta":35, "bold":1 }
	def colorf(color):
		return lambda x: "\x1B[" + ansicolors[color] + "m" + x + "\x1B[0m"
		
snippet printc
	print(colorf(${1:color})(${2}))

snippet printce
	print(colorf(${1:color})(${2}), file=sys.stderr)
